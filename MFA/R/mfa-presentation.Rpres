Multiple Factor Analysis Using R
========================================================
author:Saurabh Belsare, Ankush Desai, Jieun Kim and Allen Tang
date: `r Sys.Date()`
autosize: true

Introduction
========================================================

**MFA Package**
- The package `"mfa"` implements a statistical multivariate technique called Multiple Factor Analysis (MFA)

- In addition to the main `"mfa"` function, it provides a set of complementary functions and methods to compute summaries of eigenvalues, contributions, coefficients to study the between-table structure (both $R_V$ and $L_g$), and bootstrapping to estimate the stability of the compromise factor scores.



- For visualization, the package includes functions for five types of plots:
  + a bar-chart for the eigenvalues,
  + a scatterplot of the common factor scores,
  + a scatterplot of the partial factor scores by block and by observation,
  + a scatterplot of the loadings of given dimensions (i.e., components), and
  + a bar-chart for bootstrap ratios. A Shiny App is available for an interactive visualization.

Main Function: Creating a `mfa` object
========================================================
The first step is to create a `"mfa"` object with the function `mfa()`:

```{r, eval=FALSE}
mymfa <- function(data, sets, supplData, ncomps = NULL, center = TRUE, scale = TRUE)

```

This is the main mfa function that implements all the calculations for performing the Multiple Factor Analysis. The function takes six arguments:

- `data`: the input data, which contains only the assessor inputs,
- `sets`: the column number list demarcating columns for each assessor,
- `supplData`: the list of supplementary data for an additional factor analysis,
- `ncomps`: the number of components for the MFA,
- `center`: a boolean flag which decides whether to center the data,
- `scale`: a boolean flag which decides whether to scale the data.

Main Function: return value of mfa
========================================================
The function returns an object of type `mfa` that contains a list containing all the output information computed by the MFA analysis. It includes:

- **Main Output**: the eigenvalues, compromise factor scroes, matrix loadings, and contributions (by observation, variable, and table);
- **Additional information**: labels, column names of the data, sets, bootstrap ratios, and the number of components;
- **Supplementary Output**: eigenvalues, compromise factor scores, matrix loadings, and the number of components.


Complementary Functions
=======================================================
## Print basic information about mfa object
The package provides a print method to display basic information about mfa object: the numbers of blocks and components.
```{r}
source("MFAHelperFunctions.R")
source("mfa.R")
print(mfa_out)
```

Complementary Functions
=======================================================
## Summaries of eigenvalues
This package provides the summaries of eigenvalues that include each component's singular values, eigenvalues, cumulative eigenvalues, \% inertia, and cumulative \% inertia.
```{r}
Eigenvalues(mfa_out)
```

Complementary Functions
=======================================================
## Contributions
This package provides three complementary functions to print (1) contribution of an observation to a dimension, (2) contribution of a variable to a dimension, and (3) contribution of a table to a dimension.
```{r}
# Note that only 2 roles are printed for the contributions below
head(CtrObserToDimension(mfa_out), 2)
head(CtrVarToDimension(mfa_out), 2)
head(CtrTableToDimension(mfa_out), 2)
```

Complementary Functions
======================================================
## Between-table structure
This package provides functions for computing $R_V$ and $L_g$ coefficients to evaluate the similarity between two tables.
For $R_V$ coefficient, `RV()` takes two tables as the arguments and computes the cofficient for two tables.
Additionally, `Rv_table()` takes a data set and a list with sets of variables and computes a matrix of $R_V$ coefficients. For $L_g$ coefficient, this package provides `Lg()` and `Lg_table()`; their usage parallels that of $R_V$ coefficient.

```{r, eval = FALSE}
# RV
rv_coef <- RV(table1, table2)
rv_table <- Rv_table(dataset, sets = list(1:3, 4:5, 6:10))

# Lg
lg_coef <- Lg(table1, table2)
lg_table <- Lg_table(dataset, sets = list(1:3, 4:5, 6:10))
```

Complementary Functions
======================================================
## Bootstrap
This package allows users to perform bootstrapping in order to estimate the stability of the compromise factor scores.  While it does not provide a separate function for computing bootstrap ratios, these outputs are available from the main function `mfa()`. It generates 1,000 bootstrap samples that give 1,000 estimated bootstrapped factor scores. Like t-statistics, bootstrap ratios can be used to find the observations that reliably contribute to a given component.


```{r}
boot_ratio <- mfa_out$BootstrapRatio
boot_ratio
```

Visualization
======================================================

This package provides five types of plots.
- a bar-chart for the eigenvalues,
- a scatterplot of the common factor scores,
- a scatterplot of the partial factor scores by block and by observation,
- a scatterplot of the loadings of given dimensions (i.e., components),
- a bar-chart for bootstrap ratios. You can use following functions to create graphics:


```{r, eval=FALSE}
# for plotting all the graphs
plot(mfa_out)
```

A bar-chart for the eigenvalues
=================================================
```{r}
plot_eigenvalues(mfa_out)
```

A scatterplot of the common factor scores
================================================

```{r}
plot_factor_scores(mfa_out)
```

A scatterplot of the partial factor scores by block and by observation
================================================
```{r}
plot_partial_factor_scores(mfa_out)
```

A scatterplot of the loadings of given dimensions (i.e., components)
================================================
```{r}
plot_variable_loadings(mfa_out)
```

A bar-chart for bootstrap ratios. You can use following functions to create graphics
================================================
```{r}
plot_boot_ratio(mfa_out, 2)
```


========================================

**Thank You**
